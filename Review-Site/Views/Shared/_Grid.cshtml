@model Review_Site.Data.Models.Grid

@*
    Renders all the grid elements associated with a particular grid.
    This is probably quite a messy way to do this, and looks terrible in razor...but it should work!
 *@

@{
    <div class="row">
    @foreach (var square in Model.GridElements.OrderBy(x => x.Created))
    {
        int height = 0;
        var width = (80 * square.Width) - 32;

        switch (square.SizeClass)
        {
            case "tall":
                height = 500;
                break;
            case "regular":
                height = 300;
                break;
            case "small":
                height = 200;
                break;
        }
        <div class="padtop gridsquare @square.SizeClass large-@(square.Width) columns">
            <div style="border-color: #@(String.IsNullOrEmpty(square.BorderColor.Value) ? "CCCCCC" : square.BorderColor.Value)">
            <div class="overlay @square.HeadingClass @(square.InverseHeading ? "inverse" : "")">
                <a href="@Url.Action("GetArticle", new { controller = "Core", area = "", id = square.ArticleID })">
                    <h3>@(square.UseHeadingText ? square.HeadingText : square.Article.Title)</h3>
                </a>
            </div>
                <a href="@Url.Action("GetArticle", new { controller = "Core", area = "", id = square.ArticleID })">
                    <img alt="Grid Image @square.Image.Title" src="@Url.Action("GetResource", new { controller = "Core", area = "", id = square.ImageID, width = width, height = height, noSource = true })"/>
                </a>

            </div>
        </div>
    }
    </div>
}